#include <Servo.h>
#include <Keypad.h>

// ─── SECTION 1: PIN & HARDWARE SETUP ────────────────────────────────
// ## 1.1 Servos for θ (azimuth), α (elevation), φ (elbow)
Servo servoAz;    // controls θ → attach to PIN_AZ
Servo servoEl;    // controls α → attach to PIN_EL
Servo servoPh;    // controls φ → attach to PIN_PH
const int PIN_AZ = 9;
const int PIN_EL = 10;
const int PIN_PH = 12;

// ## 1.2 Joystick / potentiometers for MANUAL mode
const int PIN_VRX = A0;   // analog X → θ  
const int PIN_VRY = A1;   // analog Y → α  
const int PIN_VRZ = A2;   // analog Z → φ  

// ## 1.3 4×4 Keypad for WAYPOINT entry
const byte ROWS = 4, COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},  // 'B' = decimal
  {'7','8','9','C'},
  {'*','0','#','D'}   // '*'=backspace, '#'=confirm, 'D'=toggle MANUAL
};
byte rowPins[ROWS] = {2,3,4,5};
byte colPins[COLS] = {6,7,8,11};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// ## 1.4 Operation modes
enum Mode { WAYPOINT, MANUAL };
Mode mode = WAYPOINT;

// ─── SECTION 2: IK SOLVER (2-LINK, unit lengths) ────────────────────
// ## 2.1 Compute inverse kinematics: P[3] → angles[3] in degrees
bool solveIK(float P[3], float angles[3]) {
  const float l1 = 1.0, l2 = 1.0;
  float r = sqrt(P[0]*P[0] + P[1]*P[1] + P[2]*P[2]);
  if (r > l1 + l2 || r < fabs(l1 - l2)) return false;

  // -- unit vector ex = P/r
  float ex[3] = { P[0]/r, P[1]/r, P[2]/r };

  // -- ez = ex × k  (k=[0,0,1])
  float ez[3] = { ex[1], -ex[0], 0 };
  float n = sqrt(ez[0]*ez[0] + ez[1]*ez[1] + ez[2]*ez[2]);
  if (n < 1e-6) { ez[0]=1; ez[1]=0; ez[2]=0; }
  else        { ez[0]/=n; ez[1]/=n; ez[2]/=n; }

  // -- ey = ez × ex
  float ey[3] = {
    ez[1]*ex[2] - ez[2]*ex[1],
    ez[2]*ex[0] - ez[0]*ex[2],
    ez[0]*ex[1] - ez[1]*ex[0]
  };

  // -- law of cosines for a1
  float cosA1 = (l1*l1 + r*r - l2*l2) / (2*l1*r);
  cosA1 = constrain(cosA1, -1.0f, 1.0f);
  float a1 = acos(cosA1);

  // -- v1 = cos(a1)*ex + sin(a1)*ey
  float v1[3] = {
    cos(a1)*ex[0] + sin(a1)*ey[0],
    cos(a1)*ex[1] + sin(a1)*ey[1],
    cos(a1)*ex[2] + sin(a1)*ey[2]
  };

  // -- v2 = normalize(P - v1)
  float v2d[3] = { P[0]-v1[0], P[1]-v1[1], P[2]-v1[2] };
  float n2 = sqrt(v2d[0]*v2d[0] + v2d[1]*v2d[1] + v2d[2]*v2d[2]);
  float v2[3] = { v2d[0]/n2, v2d[1]/n2, v2d[2]/n2 };

  // -- extract angles in degrees
  angles[0] = atan2(v1[1], v1[0]) * 180.0/PI;                      // θ
  angles[1] = asin(constrain(v1[2], -1.0f, 1.0f)) * 180.0/PI;     // α
  angles[2] = acos(constrain(
                    v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2], 
                    -1.0f, 1.0f)) * 180.0/PI;                     // φ

  return true;
}

// ─── SECTION 3: WAYPOINT ENTRY BUFFERS ──────────────────────────────
// ## 3.1 ASCII buffers for X, Y, Z
String buf[3] = {"","",""};
int axisIdx = 0;  // 1=X,2=Y,3=Z

// ## 3.2 Handle keypresses in WAYPOINT mode
void handleWaypoint(char k) {
  if (axisIdx == 0) return;

  if (k == '*') {               // backspace
    if (buf[axisIdx-1].length() > 0)
      buf[axisIdx-1].remove(buf[axisIdx-1].length()-1);
  }
  else if (k == 'B') {          // decimal point
    if (buf[axisIdx-1].indexOf('.') == -1)
      buf[axisIdx-1] += '.';
  }
  else if (k == 'A') {          // toggle sign
    if (buf[axisIdx-1].startsWith("-"))
      buf[axisIdx-1].remove(0, 1);
    else
      buf[axisIdx-1] = "-" + buf[axisIdx-1];
  }
  else if (k >= '0' && k <= '9') { // digit
    buf[axisIdx-1] += k;
  }
  else if (k == '#') {          // confirm this axis
    if (buf[axisIdx-1].length() > 0) {
      static float target[3];
      target[axisIdx-1] = buf[axisIdx-1].toFloat();
      Serial.print("Axis "); Serial.print(axisIdx);
      Serial.print(" = "); Serial.println(target[axisIdx-1]);
      axisIdx++;
      if (axisIdx > 3) {
        float ang[3];
        if (solveIK(target, ang)) {
          Serial.print("Waypoint → ");
          Serial.print(target[0]); Serial.print(", ");
          Serial.print(target[1]); Serial.print(", ");
          Serial.println(target[2]);
          Serial.print("Angles → θ="); Serial.print(ang[0]);
          Serial.print(" α="); Serial.print(ang[1]);
          Serial.print(" φ="); Serial.println(ang[2]);
          servoAz.write(ang[0]);
          servoEl.write(ang[1] + 90);
          servoPh.write(ang[2] + 90); // map φ (−90..+90) → 0..180
        } else {
          Serial.println("❌ Unreachable waypoint");
        }
        axisIdx = 0;
      } else {
        buf[axisIdx-1] = "";
        Serial.print("Enter ");
        Serial.println(axisIdx==2 ? "Y" : "Z");
      }
    }
  }
}

// ─── SECTION 4: KEYPAD & MODE HANDLING ──────────────────────────────
void handleKeypad(char k) {
  if (k == 'D') {               // toggle to MANUAL
    mode = MANUAL;
    Serial.println("Mode → MANUAL");
  }
  else if (k == '#' && mode == MANUAL) { // start WAYPOINT
    mode = WAYPOINT;
    axisIdx = 1;
    buf[0]=buf[1]=buf[2]="";
    Serial.println("Mode → WAYPOINT. Enter X:");
  }
  else if (mode == WAYPOINT) {
    handleWaypoint(k);
  }
}

// ─── SECTION 5: SETUP ───────────────────────────────────────────────
void setup() {
  Serial.begin(9600);
  servoAz.attach(PIN_AZ);
  servoEl.attach(PIN_EL);
  servoPh.attach(PIN_PH);
  //pinMode(PIN_SW, INPUT_PULLUP);
  Serial.println("Ready. 'D'→MANUAL, '#'→WAYPOINT");
}

// ─── SECTION 6: MAIN LOOP ──────────────────────────────────────────
void loop() {
      // ─── inside loop() ────────────────────────────────────────────────
 //6.1 Keypad polling
  char key = keypad.getKey();
  if (key) handleKeypad(key);

  // 6.2 Manual joystick control
  if (mode == MANUAL) {
    float vx = analogRead(PIN_VRX) / 1023.0;
    float vy = analogRead(PIN_VRY) / 1023.0;
    float vz = analogRead(PIN_VRZ) / 1023.0;
    float th = vx * 360.0;          // θ: 0–360
    float el = vy * 180.0 - 90.0;   // α: -90–+90
    float ph = vz * 180.0 - 90.0;   // φ: -90–+90

    servoAz.write(th);
    servoEl.write(el + 90);
    servoPh.write(ph + 90);

    Serial.print("MANUAL→ θ="); Serial.print(th);
    Serial.print(" α="); Serial.print(el);
    Serial.print(" φ="); Serial.println(ph);
    delay(100);
  }
}
